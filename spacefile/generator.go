package spacefile

import (
	"io"
	"text/template"

	"github.com/mittwald/spacectl/client/software"
)

const SpacefileTemplate = `version = "1"

// This file was auto-generated by "spacectl space init"
// Feel free to adjust it to your own needs.

space "{{ .SpaceDNSLabel }}" {
  name = "{{ .SpaceName }}"
  team = "{{ .TeamName }}"

  payment {
    paymentProfile = "{{ .PaymentProfileID }}"
    plan = "{{ .Plan }}"
  }

  // This option sets the amount of pre-provisioned storage space allocated for
  // your project. Note that this is not a hard limit -- exceedance will be
  // billed according to on-demand rates.
  // CAUTION: This option may cause additional charges to apply.
  resource storage {
    quantity = "{{ .Resources.Storage }}"
  }

  // This option sets the maximum number of application Pods that may be started
  // for your project.
  // CAUTION: This option may cause additional charges to apply.
  resource scaling {
    quantity = {{ .Resources.Scaling }}
  }

  // You can use this option to set the minimal allowed backup interval for the
  // Space.
  // CAUTION: This option may cause additional charges to apply.
  {{- if ne .Options.BackupIntervalMinutes 0 }}
  option backupIntervalMinutes {
    value = {{ .Options.BackupIntervalMinutes }}
  }
  {{- else }}
  // option backupIntervalMinutes {
  //   value = 60
  // }
  {{- end }}

  stage production {
    application {{ .Software.Identifier }} {

      // The "version" field supports semantic version ranges. Valid
      // examples might be "8.7.0", "~8.7.0", ">=7.0.0, <7.3".
      // We will always pick the latest available version that matches
      // this constraint and update them regularly, so do not specify
      // your version range too loosly for a production environment.
      version = "~{{ .Software.LatestVersion.Number }}"

      userData {
        initialAdminUser {
          username = "admin"
          password = "my-password"
        }
      }
    }

    // cron helloworld {
    //   schedule = "30 * * * *"
    //   command {
    //     command = "echo"
    //     arguments = ["Hello World"]
    //     workingDirectory = "/var/www"
    //   }
    //   timezone = "Europe/Berlin"
    // }

    // virtualHost test.spaces.de {
    //   tls {
    //     type = "letsencrypt"
    //   }
    // }

    // protection = "oauth"
  }

  // You can add additional stages to your Space definition
  // Use the "inherit" attribute to have individual stages inherit
  // their configuration from each other.

  // stage development {
  //   inherit = "production"
  // }
}
`

type templateDataResources struct {
	Storage string
	Scaling int
}

type templateDataOptions struct {
	BackupIntervalMinutes int
}

type templateData struct {
	TeamName         string
	SpaceName        string
	SpaceDNSLabel    string
	Software         *software.Software
	PaymentProfileID string
	Plan             string
	Resources        templateDataResources
	Options          templateDataOptions
}

func Generate(
	teamName string,
	spaceName string,
	spaceDNSLabel string,
	software *software.Software,
	paymentProfileID string,
	plan string,
	storage string,
	scaling int,
	backupInterval int,
	out io.Writer,
) error {
	t := template.Must(template.New("spacefile").Parse(SpacefileTemplate))
	return t.Execute(out, templateData{
		teamName,
		spaceName,
		spaceDNSLabel,
		software,
		paymentProfileID,
		plan,
		templateDataResources{
			storage,
			scaling,
		},
		templateDataOptions{
			backupInterval,
		},
	})
}
